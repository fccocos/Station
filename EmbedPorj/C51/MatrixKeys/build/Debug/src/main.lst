C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\build\Debug\src\main.o
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.exe .\SRC\MAIN.C PRINT(.\build\Debug\src\main.lst) OMF2 TABS(4) CODE NOCOND 
                    -SYMBOLS OPTIMIZE(8,SPEED) SMALL ROM(LARGE) INCDIR(D:\Keil_v5\C51\INC;.\src;.\inc) DEFINE(__UVISION_VERSION=526) OBJECT(.
                    -\build\Debug\src\main.o)

line level    source

   1          #include <reg52.h>
   2          
   3          typedef unsigned char u8;
   4          typedef unsigned int u16;
   5          typedef char s8;
   6          
   7          //定义按键
   8          /*第四列按键*/
   9          #define S16 0xEE
  10          #define S12 0xDE
  11          #define S8  0xBE
  12          #define S4  0x7E
  13          
  14          /*第三列按键*/
  15          #define S15 0xED
  16          #define S11 0xDD
  17          #define S7  0xBD
  18          #define S3  0x7D
  19          
  20          /*第二列按键*/
  21          #define S14 0xEB
  22          #define S10 0xDB
  23          #define S6  0xBB
  24          #define S2  0x7B
  25          
  26          /*第一列按键*/
  27          #define S13 0xE7
  28          #define S9  0xD7
  29          #define S5  0xB7
  30          #define S1  0x77
  31          
  32          //定义数码管的段选端口P0
  33          #define  DITIGALTUBE_ZERO_PORT P0
  34          
  35          //定义数码管未选线
  36          sbit A2 = P2^4;
  37          sbit A1 = P2^3;
  38          sbit A0 = P2^2;
  39          
  40          //定义矩阵按键端口P1
  41          #define MATRIX_KEYS P1
  42          
  43          
  44          
  45          void delay_10ms(u16 timecout)
  46          {
  47   1          while (timecout--);
  48   1      }
  49          
  50          /*使用行列扫描法*/
  51          s8 matrix_keys_ranks_scan()
  52          {
  53   1          s8 value_index=-1;
C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 2   

  54   1          //将第4根列线为低电平1111 1110 0xFE
  55   1          MATRIX_KEYS = 0xFE;
  56   1          if(MATRIX_KEYS!=0xFE)//判断第一列是否有按键按下
  57   1          {
  58   2              delay_10ms(1000);//消抖
  59   2              
  60   2              switch(MATRIX_KEYS)
  61   2              {
  62   3                  case S16:
  63   3                      value_index = 15;
  64   3                      break;
  65   3                  case S12:
  66   3                      value_index = 11;
  67   3                      break;
  68   3                  case S8:
  69   3                      value_index = 7;
  70   3                      break;
  71   3                  case S4:
  72   3                      value_index = 3;
  73   3                      break;
  74   3              }
  75   2          }//0XFE
  76   1      
  77   1          //将第三根列线为低电平1111 1101 0xFD
  78   1          MATRIX_KEYS = 0xFD;
  79   1          if(MATRIX_KEYS!=0xFD)//判断第一列是否有按键按下
  80   1          {
  81   2              delay_10ms(1000);//消抖
  82   2              
  83   2              switch(MATRIX_KEYS)
  84   2              {
  85   3                  case S15:
  86   3                      value_index = 14;
  87   3                      break;
  88   3                  case S11:
  89   3                      value_index = 10;
  90   3                      break;
  91   3                  case S7:
  92   3                      value_index = 6;
  93   3                      break;
  94   3                  case S3:
  95   3                      value_index = 2;
  96   3                      break;
  97   3              }
  98   2          }//0XFD
  99   1      
 100   1          //将第二根列线为低电平1111 1011 0xFB
 101   1          MATRIX_KEYS = 0xFB;
 102   1          if(MATRIX_KEYS!=0xFB)//判断第一列是否有按键按下
 103   1          {
 104   2              delay_10ms(1000);//消抖
 105   2              
 106   2              switch(MATRIX_KEYS)
 107   2              {
 108   3                  case S14:
 109   3                      value_index = 13;
 110   3                      break;
 111   3                  case S10:
 112   3                      value_index = 9;
 113   3                      break;
 114   3                  case S6:
 115   3                      value_index = 5;
C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 3   

 116   3                      break;
 117   3                  case S2:
 118   3                      value_index = 1;
 119   3                      break;
 120   3              }
 121   2          }//0XFB
 122   1      
 123   1          //将第一根列线为低电平1111 0111 0xF7
 124   1          MATRIX_KEYS = 0xF7;
 125   1          if(MATRIX_KEYS!=0xF7)//判断第一列是否有按键按下
 126   1          {
 127   2              delay_10ms(1000);//消抖
 128   2              
 129   2              switch(MATRIX_KEYS)
 130   2              {
 131   3                  case S13:
 132   3                      value_index = 12;
 133   3                      break;
 134   3                  case S9:
 135   3                      value_index = 8;
 136   3                      break;
 137   3                  case S5:
 138   3                      value_index = 4;
 139   3                      break;
 140   3                  case S1:
 141   3                      value_index = 0;
 142   3                      break;
 143   3              }
 144   2          }//0XF7
 145   1      
 146   1          return value_index;
 147   1      }
 148          
 149          /*使用反转法进行按键检测*/
 150          s8 matrix_keys_flap_scan()
 151          {
 152   1          static s8 value_index = -1;
 153   1          
 154   1          //将所有的行线置为低电平0000 1111 0x0F
 155   1          MATRIX_KEYS = 0x0F;
 156   1          if(MATRIX_KEYS != 0x0F)
 157   1          {
 158   2              delay_10ms(1000);
 159   2              //检测列
 160   2              MATRIX_KEYS = 0x0F;
 161   2              switch(MATRIX_KEYS)//获取列线 第一列 0 第二列 1 第三列2 第四列 3
 162   2              {
 163   3                  case 0x07: value_index = 0; break;
 164   3                  case 0x0B: value_index = 1; break;
 165   3                  case 0x0D: value_index = 2; break;
 166   3                  case 0x0E: value_index = 3; break;
 167   3              }
 168   2              //进行反转，检测行
 169   2              MATRIX_KEYS = 0xF0;
 170   2              switch(MATRIX_KEYS)//获取行线 第一不变， 第二行 +4， 第三行 +8， 第四行 +12
 171   2              {
 172   3                  case 0x70: value_index = value_index; break;
 173   3                  case 0xB0: value_index = value_index+4; break;
 174   3                  case 0xD0: value_index = value_index+8; break;
 175   3                  case 0xE0: value_index = value_index+12; break;
 176   3              }
 177   2          }else value_index = -1;
C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 4   

 178   1      
 179   1          return value_index;
 180   1      }
 181          
 182          u8 smg_code[]={
 183                  0x3f, 0x06, 0x5b, 0x4f, //0 1 2 3
 184                  0x66, 0x6d, 0x7d, 0x07, //4 5 6 7
 185                  0x7f, 0x6f, 0x77, 0x7c, //8 9 A B
 186                  0x39, 0x5e, 0x79, 0x71  //C D E F
 187                  };
 188          
 189          sbit testled = P2^1;
 190          void main(void)
 191          {
 192   1          s8 index = -1;
 193   1          
 194   1          while(1)
 195   1          {
 196   2              index = matrix_keys_flap_scan();
 197   2              A2 = 1; A1= 0; A0 = 1;
 198   2              if(index !=-1)
 199   2              {
 200   3                  DITIGALTUBE_ZERO_PORT = smg_code[index];
 201   3              }
 202   2          }
 203   1      
 204   1      }
 205          
 206          
 207          
C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION L?0050 (BEGIN)
0000         L?0051:
0000 7FE8              MOV     R7,#0E8H
0002 7E03              MOV     R6,#03H
             ; FUNCTION _delay_10ms (BEGIN)
                                           ; SOURCE LINE # 45
;---- Variable 'timecout' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 46
0004         ?C0001:
                                           ; SOURCE LINE # 47
0004 EF                MOV     A,R7
0005 1F                DEC     R7
0006 AC06              MOV     R4,AR6
0008 7001              JNZ     ?C0046
000A 1E                DEC     R6
000B         ?C0046:
000B 4C                ORL     A,R4
000C 70F6              JNZ     ?C0001
                                           ; SOURCE LINE # 48
000E 22                RET     
             ; FUNCTION _delay_10ms (END)

             ; FUNCTION matrix_keys_ranks_scan (BEGIN)
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 52
                                           ; SOURCE LINE # 53
0000 7500FF      R     MOV     value_index,#0FFH
                                           ; SOURCE LINE # 55
0003 7590FE            MOV     P1,#0FEH
                                           ; SOURCE LINE # 56
0006 AF90              MOV     R7,P1
0008 EF                MOV     A,R7
0009 64FE              XRL     A,#0FEH
000B 6028              JZ      ?C0004
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
000D 120000      R     LCALL   L?0050
                                           ; SOURCE LINE # 60
0010 AF90              MOV     R7,P1
0012 EF                MOV     A,R7
0013 2482              ADD     A,#082H
0015 601B              JZ      ?C0009
0017 24C0              ADD     A,#0C0H
0019 6012              JZ      ?C0008
001B 24E0              ADD     A,#0E0H
001D 6009              JZ      ?C0007
001F 24F0              ADD     A,#0F0H
0021 7012              JNZ     ?C0004
                                           ; SOURCE LINE # 61
                                           ; SOURCE LINE # 62
0023         ?C0006:
                                           ; SOURCE LINE # 63
0023 75000F      R     MOV     value_index,#0FH
                                           ; SOURCE LINE # 64
0026 800D              SJMP    ?C0004
                                           ; SOURCE LINE # 65
0028         ?C0007:
                                           ; SOURCE LINE # 66
0028 75000B      R     MOV     value_index,#0BH
C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 6   

                                           ; SOURCE LINE # 67
002B 8008              SJMP    ?C0004
                                           ; SOURCE LINE # 68
002D         ?C0008:
                                           ; SOURCE LINE # 69
002D 750007      R     MOV     value_index,#07H
                                           ; SOURCE LINE # 70
0030 8003              SJMP    ?C0004
                                           ; SOURCE LINE # 71
0032         ?C0009:
                                           ; SOURCE LINE # 72
0032 750003      R     MOV     value_index,#03H
                                           ; SOURCE LINE # 73
                                           ; SOURCE LINE # 74
                                           ; SOURCE LINE # 75
0035         ?C0004:
                                           ; SOURCE LINE # 78
0035 7590FD            MOV     P1,#0FDH
                                           ; SOURCE LINE # 79
0038 AF90              MOV     R7,P1
003A EF                MOV     A,R7
003B 64FD              XRL     A,#0FDH
003D 6028              JZ      ?C0010
                                           ; SOURCE LINE # 80
                                           ; SOURCE LINE # 81
003F 120000      R     LCALL   L?0050
                                           ; SOURCE LINE # 83
0042 AF90              MOV     R7,P1
0044 EF                MOV     A,R7
0045 2483              ADD     A,#083H
0047 601B              JZ      ?C0015
0049 24C0              ADD     A,#0C0H
004B 6012              JZ      ?C0014
004D 24E0              ADD     A,#0E0H
004F 6009              JZ      ?C0013
0051 24F0              ADD     A,#0F0H
0053 7012              JNZ     ?C0010
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
0055         ?C0012:
                                           ; SOURCE LINE # 86
0055 75000E      R     MOV     value_index,#0EH
                                           ; SOURCE LINE # 87
0058 800D              SJMP    ?C0010
                                           ; SOURCE LINE # 88
005A         ?C0013:
                                           ; SOURCE LINE # 89
005A 75000A      R     MOV     value_index,#0AH
                                           ; SOURCE LINE # 90
005D 8008              SJMP    ?C0010
                                           ; SOURCE LINE # 91
005F         ?C0014:
                                           ; SOURCE LINE # 92
005F 750006      R     MOV     value_index,#06H
                                           ; SOURCE LINE # 93
0062 8003              SJMP    ?C0010
                                           ; SOURCE LINE # 94
0064         ?C0015:
                                           ; SOURCE LINE # 95
0064 750002      R     MOV     value_index,#02H
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 97
C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 7   

                                           ; SOURCE LINE # 98
0067         ?C0010:
                                           ; SOURCE LINE # 101
0067 7590FB            MOV     P1,#0FBH
                                           ; SOURCE LINE # 102
006A AF90              MOV     R7,P1
006C EF                MOV     A,R7
006D 64FB              XRL     A,#0FBH
006F 6028              JZ      ?C0016
                                           ; SOURCE LINE # 103
                                           ; SOURCE LINE # 104
0071 120000      R     LCALL   L?0051
                                           ; SOURCE LINE # 106
0074 AF90              MOV     R7,P1
0076 EF                MOV     A,R7
0077 2485              ADD     A,#085H
0079 601B              JZ      ?C0021
007B 24C0              ADD     A,#0C0H
007D 6012              JZ      ?C0020
007F 24E0              ADD     A,#0E0H
0081 6009              JZ      ?C0019
0083 24F0              ADD     A,#0F0H
0085 7012              JNZ     ?C0016
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 108
0087         ?C0018:
                                           ; SOURCE LINE # 109
0087 75000D      R     MOV     value_index,#0DH
                                           ; SOURCE LINE # 110
008A 800D              SJMP    ?C0016
                                           ; SOURCE LINE # 111
008C         ?C0019:
                                           ; SOURCE LINE # 112
008C 750009      R     MOV     value_index,#09H
                                           ; SOURCE LINE # 113
008F 8008              SJMP    ?C0016
                                           ; SOURCE LINE # 114
0091         ?C0020:
                                           ; SOURCE LINE # 115
0091 750005      R     MOV     value_index,#05H
                                           ; SOURCE LINE # 116
0094 8003              SJMP    ?C0016
                                           ; SOURCE LINE # 117
0096         ?C0021:
                                           ; SOURCE LINE # 118
0096 750001      R     MOV     value_index,#01H
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 121
0099         ?C0016:
                                           ; SOURCE LINE # 124
0099 7590F7            MOV     P1,#0F7H
                                           ; SOURCE LINE # 125
009C AF90              MOV     R7,P1
009E EF                MOV     A,R7
009F 64F7              XRL     A,#0F7H
00A1 6028              JZ      ?C0022
                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
00A3 120000      R     LCALL   L?0051
                                           ; SOURCE LINE # 129
00A6 AF90              MOV     R7,P1
C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 8   

00A8 EF                MOV     A,R7
00A9 2489              ADD     A,#089H
00AB 601B              JZ      ?C0027
00AD 24C0              ADD     A,#0C0H
00AF 6012              JZ      ?C0026
00B1 24E0              ADD     A,#0E0H
00B3 6009              JZ      ?C0025
00B5 24F0              ADD     A,#0F0H
00B7 7012              JNZ     ?C0022
                                           ; SOURCE LINE # 130
                                           ; SOURCE LINE # 131
00B9         ?C0024:
                                           ; SOURCE LINE # 132
00B9 75000C      R     MOV     value_index,#0CH
                                           ; SOURCE LINE # 133
00BC 800D              SJMP    ?C0022
                                           ; SOURCE LINE # 134
00BE         ?C0025:
                                           ; SOURCE LINE # 135
00BE 750008      R     MOV     value_index,#08H
                                           ; SOURCE LINE # 136
00C1 8008              SJMP    ?C0022
                                           ; SOURCE LINE # 137
00C3         ?C0026:
                                           ; SOURCE LINE # 138
00C3 750004      R     MOV     value_index,#04H
                                           ; SOURCE LINE # 139
00C6 8003              SJMP    ?C0022
                                           ; SOURCE LINE # 140
00C8         ?C0027:
                                           ; SOURCE LINE # 141
00C8 E4                CLR     A
00C9 F500        R     MOV     value_index,A
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
                                           ; SOURCE LINE # 144
00CB         ?C0022:
                                           ; SOURCE LINE # 146
00CB AF00        R     MOV     R7,value_index
                                           ; SOURCE LINE # 147
00CD 22                RET     
             ; FUNCTION matrix_keys_ranks_scan (END)

             ; FUNCTION matrix_keys_flap_scan (BEGIN)
                                           ; SOURCE LINE # 150
                                           ; SOURCE LINE # 151
                                           ; SOURCE LINE # 155
0000 75900F            MOV     P1,#0FH
                                           ; SOURCE LINE # 156
0003 AF90              MOV     R7,P1
0005 EF                MOV     A,R7
0006 640F              XRL     A,#0FH
0008 6050              JZ      ?C0029
                                           ; SOURCE LINE # 157
                                           ; SOURCE LINE # 158
000A 120000      R     LCALL   L?0051
                                           ; SOURCE LINE # 160
000D 75900F            MOV     P1,#0FH
                                           ; SOURCE LINE # 161
0010 AF90              MOV     R7,P1
0012 EF                MOV     A,R7
0013 24F5              ADD     A,#0F5H
C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 9   

0015 6010              JZ      ?C0032
0017 24FE              ADD     A,#0FEH
0019 6011              JZ      ?C0033
001B 14                DEC     A
001C 6013              JZ      ?C0034
001E 2407              ADD     A,#07H
0020 7012              JNZ     ?C0030
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
0022         ?C0031:
0022 E4                CLR     A
0023 F500        R     MOV     value_index,A
0025 800D              SJMP    ?C0030
                                           ; SOURCE LINE # 164
0027         ?C0032:
0027 750001      R     MOV     value_index,#01H
002A 8008              SJMP    ?C0030
                                           ; SOURCE LINE # 165
002C         ?C0033:
002C 750002      R     MOV     value_index,#02H
002F 8003              SJMP    ?C0030
                                           ; SOURCE LINE # 166
0031         ?C0034:
0031 750003      R     MOV     value_index,#03H
                                           ; SOURCE LINE # 167
0034         ?C0030:
                                           ; SOURCE LINE # 169
0034 7590F0            MOV     P1,#0F0H
                                           ; SOURCE LINE # 170
0037 AF90              MOV     R7,P1
0039 EF                MOV     A,R7
003A 2450              ADD     A,#050H
003C 600C              JZ      ?C0037
003E 24E0              ADD     A,#0E0H
0040 600C              JZ      ?C0038
0042 24F0              ADD     A,#0F0H
0044 600C              JZ      ?C0039
0046 2470              ADD     A,#070H
                                           ; SOURCE LINE # 171
                                           ; SOURCE LINE # 172
0048         ?C0036:
0048 8013              SJMP    ?C0040
                                           ; SOURCE LINE # 173
004A         ?C0037:
004A 7404              MOV     A,#04H
004C 8006              SJMP    ?C0049
                                           ; SOURCE LINE # 174
004E         ?C0038:
004E 7408              MOV     A,#08H
0050         ?C0048:
0050 8002              SJMP    ?C0049
                                           ; SOURCE LINE # 175
0052         ?C0039:
0052 740C              MOV     A,#0CH
0054         ?C0049:
0054 2500        R     ADD     A,value_index
0056 F500        R     MOV     value_index,A
0058 8003              SJMP    ?C0040
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
005A         ?C0029:
005A 7500FF      R     MOV     value_index,#0FFH
C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 10  

005D         ?C0040:
                                           ; SOURCE LINE # 179
005D AF00        R     MOV     R7,value_index
                                           ; SOURCE LINE # 180
005F 22                RET     
             ; FUNCTION matrix_keys_flap_scan (END)

             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 190
                                           ; SOURCE LINE # 191
                                           ; SOURCE LINE # 192
;---- Variable 'index' assigned to Register 'R7' ----
0000 7FFF              MOV     R7,#0FFH
0002         ?C0042:
                                           ; SOURCE LINE # 194
                                           ; SOURCE LINE # 195
                                           ; SOURCE LINE # 196
0002 120000      R     LCALL   matrix_keys_flap_scan
                                           ; SOURCE LINE # 197
0005 D2A4              SETB    A2
0007 C2A3              CLR     A1
0009 D2A2              SETB    A0
                                           ; SOURCE LINE # 198
000B EF                MOV     A,R7
000C FD                MOV     R5,A
000D 33                RLC     A
000E 95E0              SUBB    A,ACC
0010 FC                MOV     R4,A
0011 ED                MOV     A,R5
0012 F4                CPL     A
0013 7002              JNZ     ?C0047
0015 EC                MOV     A,R4
0016 F4                CPL     A
0017         ?C0047:
0017 60E9              JZ      ?C0042
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0019 7400        R     MOV     A,#LOW smg_code
001B 2F                ADD     A,R7
001C F8                MOV     R0,A
001D E6                MOV     A,@R0
001E F580              MOV     P0,A
                                           ; SOURCE LINE # 201
                                           ; SOURCE LINE # 202
0020 80E0              SJMP    ?C0042
             ; FUNCTION main (END)

C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 11  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


P0 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0080H  1
P1 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0090H  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
T0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B4H  1
AC . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D6H  1
T1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B5H  1
T2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0090H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
EXF2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CEH  1
RD . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B7H  1
ES . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
RI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
INT0 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B2H  1
CY . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D7H  1
TI . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
INT1 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B3H  1
RCAP2H . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CBH  1
PS . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
T2EX . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0091H  1
OV . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D2H  1
RCAP2L . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CAH  1
main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  index. . . . . . . . . . . . . . . .  * REG *  DATA   CHAR     0007H  1
C_T2 . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C9H  1
WR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B6H  1
s8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
u8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
RCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CDH  1
TCLK . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CCH  1
SBUF . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
SCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
_delay_10ms. . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0004H  -----
  timecout . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
IE0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0089H  1
IE1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008BH  1
B. . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F0H  1
matrix_keys_ranks_scan . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value_index. . . . . . . . . . . . .  AUTO     DATA   CHAR     0000H  1
CP_RL2 . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00C8H  1
smg_code . . . . . . . . . . . . . . .  PUBLIC   DATA   ARRAY    0001H  16
matrix_keys_flap_scan. . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  value_index. . . . . . . . . . . . .  STATIC   DATA   CHAR     0000H  1
ACC. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E0H  1
ET0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A9H  1
ET1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ABH  1
TF0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008DH  1
ET2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ADH  1
TF1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008FH  1
TF2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CFH  1
RB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009AH  1
C51 COMPILER V9.60.0.0   MAIN                                                              05/25/2022 11:16:56 PAGE 12  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TH0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008CH  1
EX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A8H  1
IT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0088H  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
TB8. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009BH  1
EX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AAH  1
IT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008AH  1
TH2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CDH  1
P. . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D0H  1
SM0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009FH  1
TL0. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008AH  1
SM1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009EH  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
SM2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009DH  1
TL2. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00CCH  1
PT0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B9H  1
PT1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BBH  1
RS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D3H  1
PT2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BDH  1
TR0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008CH  1
RS1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D4H  1
TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
TR2. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CAH  1
PX0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B8H  1
PX1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BAH  1
u16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
DPH. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0083H  1
DPL. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0082H  1
EXEN2. . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00CBH  1
REN. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      009CH  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
RXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B0H  1
A0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A2H  1
TXD. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00B1H  1
A1 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A3H  1
A2 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A4H  1
F0 . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00D5H  1
testled. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00A1H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    351    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     17       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
